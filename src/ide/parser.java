package ide;
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Oct 15 23:18:42 GMT-04:00 2017
//----------------------------------------------------

import java_cup.runtime.*;
import javafx.scene.control.TextArea;
import javafx.application.Platform;

/** CUP v0.10k generated ide.parser.
  * @version Sun Oct 15 23:18:42 GMT-04:00 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\003\006\000\002\002\004\000\002\004" +
    "\004\000\002\005\005\000\002\006\004\000\002\006\005" +
    "\000\002\007\004\000\002\010\006\000\002\010\005\000" +
    "\002\010\005\000\002\011\003\000\002\011\004\000\002" +
    "\012\003\000\002\012\005\000\002\013\010\000\002\014" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\004\021\006\001\002\000\004\002\053\001" +
    "\002\000\004\022\010\001\002\000\004\006\007\001\002" +
    "\000\004\022\uffff\001\002\000\004\014\045\001\002\000" +
    "\004\026\013\001\002\000\004\020\042\001\002\000\010" +
    "\016\015\017\016\025\020\001\002\000\012\016\015\017" +
    "\016\020\ufffb\025\020\001\002\000\004\025\037\001\002" +
    "\000\004\025\035\001\002\000\012\016\ufff7\017\ufff7\020" +
    "\ufff7\025\ufff7\001\002\000\004\005\021\001\002\000\004" +
    "\023\023\001\002\000\006\006\ufff5\012\ufff5\001\002\000" +
    "\004\007\030\001\002\000\006\006\025\012\026\001\002" +
    "\000\012\016\ufffa\017\ufffa\020\ufffa\025\ufffa\001\002\000" +
    "\004\023\023\001\002\000\006\006\ufff4\012\ufff4\001\002" +
    "\000\004\015\031\001\002\000\004\011\032\001\002\000" +
    "\004\024\033\001\002\000\004\010\034\001\002\000\006" +
    "\006\ufff3\012\ufff3\001\002\000\004\006\036\001\002\000" +
    "\012\016\ufff8\017\ufff8\020\ufff8\025\ufff8\001\002\000\004" +
    "\006\040\001\002\000\012\016\ufff9\017\ufff9\020\ufff9\025" +
    "\ufff9\001\002\000\012\016\ufff6\017\ufff6\020\ufff6\025\ufff6" +
    "\001\002\000\004\006\044\001\002\000\004\002\001\001" +
    "\002\000\004\002\ufff2\001\002\000\004\025\052\001\002" +
    "\000\006\006\050\011\047\001\002\000\004\025\051\001" +
    "\002\000\004\026\ufffe\001\002\000\006\006\ufffc\011\ufffc" +
    "\001\002\000\006\006\ufffd\011\ufffd\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\004\005\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\045\001\001\000\004\007\011\001" +
    "\001\000\004\014\042\001\001\000\006\010\016\011\013" +
    "\001\001\000\004\010\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\023\013\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private TextArea out;

    public void setOut(TextArea t) {
        out = t;
    }

	public void syntax_error(Symbol s) {
	    Platform.runLater(() -> {
        	        if (s.sym != ide.sym.EXITO)
                    out.setText(out.getText() +"Error de sintaxis en <" + s.left
                            + ", " + s.right + ">, cerca de: " + s.value + "\n");
                });
	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {

	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fin ::= FIN FIN_LINEA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*fin*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // movimiento ::= NOTA LLAVE_ABRE TIEMPO COMMA POSICION LLAVE_CIERRA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*movimiento*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // movimientos ::= movimientos SUMA movimiento 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*movimientos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // movimientos ::= movimiento 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*movimientos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*instrucciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= instruccion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*instrucciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= FUNCION_REPRODUCIR VARIABLE FIN_LINEA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= FUNCION_DIBUJAR VARIABLE FIN_LINEA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= VARIABLE ASIGNACION movimientos FIN_LINEA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*instruccion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // seccion_proceso ::= INICIO instrucciones 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*seccion_proceso*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def_variables ::= def_variables COMMA VARIABLE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*def_variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def_variables ::= TIPO_PIEZA VARIABLE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*def_variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seccion_variables ::= SECCION_VARIABLES def_variables FIN_LINEA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*seccion_variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_title ::= SECCION_NOMBREPROGRAMA FIN_LINEA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*program_title*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program_title seccion_variables seccion_proceso fin 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

